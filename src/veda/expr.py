# NOTE: This file is generated by `generate_ast.py` automatically, do not modify it manually

from typing import TYPE_CHECKING

from .token import Token

if TYPE_CHECKING:
    from .ast_printer import AstPrinter
else:
    AstPrinter = None


class Expr:
    Binary: "Binary"
    Grouping: "Grouping"
    Literal: "Literal"
    Unary: "Unary"

    def accept(self, visitor: AstPrinter) -> str:
        raise NotImplementedError


class Binary(Expr):
    def __init__(self, left: Expr, operator: Token, right: Expr):
        self.left = left
        self.operator = operator
        self.right = right

    def accept(self, visitor: AstPrinter) -> str:
        return visitor.visit_binary_expr(self)


class Grouping(Expr):
    def __init__(self, expression: Expr):
        self.expression = expression

    def accept(self, visitor: AstPrinter) -> str:
        return visitor.visit_grouping_expr(self)


class Literal(Expr):
    def __init__(self, value: object):
        self.value = value

    def accept(self, visitor: AstPrinter) -> str:
        return visitor.visit_literal_expr(self)


class Unary(Expr):
    def __init__(self, operator: Token, right: Expr):
        self.operator = operator
        self.right = right

    def accept(self, visitor: AstPrinter) -> str:
        return visitor.visit_unary_expr(self)


setattr(Expr, "Binary", Binary)
setattr(Expr, "Grouping", Grouping)
setattr(Expr, "Literal", Literal)
setattr(Expr, "Unary", Unary)
